//FILE: ../inc/interface.h

//IDL Type: MC024_110_lg_Applayer
//IDL Name: MC024_110_lg_Applayer_interface
//IDL Version: 006A
//IDL CheckSum: 401CC4
//This file is automatically generated by RatatoskT3,
//so change it only if you know what you are doing...

#ifndef _INTERFACE_H
 #define _INTERFACE_H


/*** H:HEAD section BEGIN: ***/
 #include "datatypes.h"
 #include "MC_HWConfig.h"
 #include "InfoBlocks.h"

/*** H:HEAD section END. ***/


/*** XCLASS Structs section BEGIN: ***/

/*** XCLASS Structs section END. ***/


/*** XCLASS Methods section BEGIN: ***/

/*** XCLASS Methods section END. ***/


/*** XCLASS Macros section BEGIN: ***/

/*** XCLASS Macros section END. ***/


/*** Misc Typedefs section BEGIN: ***/
typedef struct
{
   U32   Write;
   U32   Read;
}S_MASTERPASSWORD_t;

typedef struct
{
   S_MASTERPASSWORD_t   MasterPassword;
   BOOL                 DisableRead;
   BOOL                 DisableWrite;
   BOOL                 DisableDownload;
   BOOL                 Connect;
}S_DIAGNOSTIC_CONTROL_t;

typedef struct
{
   S32   s32[256];
   U32   u32[256];
   S16   s16[512];
   U16   u16[512];
   U16   dummy[513];
}EEUNIONTYPE;

typedef struct
{
   U16   Status;
   U16   Intern;
}S_NV_STRUCT_t;

typedef struct
{
   U8   ServerAddr;
   U8   ClientAddr;
}S_NODETYPE_STRUCT_t;

typedef struct
{
   U8   Addr;
}S_NETTYPE_STRUCT_t;  /** define the CanController as constant */

typedef struct
{
   S_NODETYPE_STRUCT_t   Node;
   S_NETTYPE_STRUCT_t    Net[1]; /** define the CanController as constant */
}S_IDTYPE_STRUCT_t;

typedef struct
{
   BOOL   Start;           /** Set during the first processing time after a power cycle (visible in the API, read) */
   U32    LoopCnt;         /** Already processed loops after the last power cycle (visible in the API, read)   */
   U16    ExecTime;        /** Real Processing time [ms] (visible in the API, read)     */
   U16    ExecTimeSave;    /** temp buffer for the actual used loop-time    */
   U16    ExecTimeOut;     /** Requested processing time [ms]  */
   U16    ExecTimeWork;    /** Actual work time during processing time [ms] (visible in the API, read)*/
   U32    ETime;           /** Time since power on [10ms] (visible in the API, read) */
   U16    ChecksumFailure; /** BIT0 = ProgramCode; BIT1 = RAM ; BIT2 = Bootloader*/
   /** BIT0 = ProgramCode; BIT1 = RAM ; BIT2 = Bootloader ; if zero system will stop ASAP */
   /** if one of the above is BITS set to 1 = application stops */
   U16    ChecksumFailureTreatment;
   U16    CrcFailed;        /** CRC calculation has failed    */
   U16    CrcStatus;        /* For temp storage only, to have downward compatibility */
   U16    CrcDownloaded;    /** CRC has been downloaded */
   U16    CrcCalculated;    /** CRC has been calculated  */
   U16    CrcCalcTime;      /** CRC background calculation time */
   BOOL   ResetExecTimeOld; /** temp buffer for the request to reset the timing */
   /** if 1 = ExecTime will be set to ExecTimeWork again   */
   BOOL   ResetExecTime;
}S_OSTYPE_STRUCT_t;

typedef struct
{
   BOOL   DigIn;

   /**  0 -> NO Pulldown, NO Pullup */
   /**  1 -> NO Pulldown, Pullup */
   /**  2 -> Pulldown, NO Pullup */
   U16   PinConfig;
   U16   PinStatus;
}S_LG_D4_INTERFACE_STRUCT_t;

typedef struct
{
   U16   AnIn;
   U16   Volt;
}S_LG_DA3_INTERFACE_STRUCT_t;

typedef struct
{
   U16   AnIn;
   U16   Volt;
   U16   Ohm;
   U16   PinConfig;
   U16   PinStatus;
}S_LG_DAR2_INTERFACE_STRUCT_t;

typedef struct
{
   BOOL   DigIn;
   U16    AnIn;
   U16    Volt;
   U16    Freq;
   U32    Per;
   U16    Count;
   U16    Duty;
   S16    QuadCount;
   S32    Phase;

   /**  0 -> NO Pulldown, NO Pullup */
   /**  1 -> NO Pulldown,    Pullup */
   /**  2 ->    Pulldown, NO Pullup */
   /**  3 ->    Pulldown,    Pullup */
   U16   PinConfig0;
   U16   PinConfig1;
   U16   DigInConfigLow;
   U16   DigInConfigHigh;
   U16   FreqConfig;
   U16   PinStatus;
   U16   FreqStatus;
}S_LG_DAF1_INTERFACE_STRUCT_t;

typedef struct
{
   U16   FreqSetting;
   U16   OutputOld;
   S32   OutputValueTemp;
   U16   uiValveResetCounter;
   U16   ReqFreqOld;
   U16   ReqFreq;
   U16   ActFreq;

   /**  0 -> DigOut push pull */
   /**  1 -> DigOut Source */
   /**  2 -> DigOut sinking */
   /**  3 -> PWM open loop */
   /**  4 -> PWM closed loop  */
   /**  5 -> PWM closed loop dither */
   /**  6 -> PVE out */
   /**  7 -> PWM birectional  */
   /**  8 -> PWM birectional with dither */
   U16    PinConfig;
   U16    PinStatus;
   BOOL   DigOut;
   U16    OutputValue;
   U16    AnIn;
   S16    FeedBackValue;
   U16    ActPWM;
   U16    DitherFreq;
   U16    DitherAmp;
   U16    CurChgLim;
}S_LG_PWM2_INTERFACE_STRUCT_t;

typedef struct
{
   BOOL   DitherActiv;
   U16    ReqFreq;
   U16    ActFreq;
}S_LG_PWM2_GROUPS_INTERFACE_STRUCT_t;

typedef struct
{
   U32    Id;
   U32    Mask;
   U8     Data[8];
   U8     Length;
   BOOL   Tx;
   BOOL   Rx;
   BOOL   Overrun;
   BOOL   TransmitMode;
   BOOL   ReceiveMode;
   BOOL   ExtendedMode;
   BOOL   OverwriteProtect;
}CAN_INTERFACE_MSG_STRUCT;

typedef struct
{
   U32   Baudrate;

   /** To satisfy different notations of the API's */
   BOOL   BusOff;
   BOOL   BussOff;
   BOOL   Reset;
   BOOL   DriverError;
   BOOL   DriverReset;
   BOOL   ErrorPassive;
   BOOL   Overflow;
   PORT   Port;
}S_CAN_INTERFACE_STRUCT_t;

typedef struct
{
   U16   AnIn;
   U16   Volt;
}S_LG_VLDP_INTERFACE_STRUCT_t;

typedef struct
{
   U16   AnIn;
   U16   Volt;
}S_LG_5V_SENSOR_PWR_STRUCT_t;

typedef struct
{
   BOOL   Green;
   BOOL   Red;
}S_LED1_INTERFACE_STRUCT_t;

/*** Misc Typedefs section END. ***/


/*** Externals section BEGIN: ***/
extern void InitExtFunc(void);
extern void ProcessExtFunc(void);
extern void InitBootFunc(void);
extern void ProcessBootFunc(void);

extern BOOL   _MAINTASKDisable;

/**  The following 2 variables are used to start the system and set parameters without starting the application */
extern BOOL   _ApplicationDisableAfterReset;
extern BOOL   _ApplicationDisableAfterResetDone;

/**  End of start-up parameter adjustment */
extern U8   _SUsage;
extern U8   _SBACKTASKUsage;
extern S_DIAGNOSTIC_CONTROL_t                ServiceTool;
extern U32                                   EEUpdTime;
extern BOOL                                  EEDirStore;
extern BOOL                                  EEDirStoreOld;
extern S_NV_STRUCT_t                         NVMem;
extern S_IDTYPE_STRUCT_t                     ID;
extern S_OSTYPE_STRUCT_t                     OS;
extern S_LG_D4_INTERFACE_STRUCT_t            C1p06;
extern S_LG_D4_INTERFACE_STRUCT_t            C1p07;
extern S_LG_D4_INTERFACE_STRUCT_t            C1p10;
extern S_LG_D4_INTERFACE_STRUCT_t            C1p11;
extern S_LG_D4_INTERFACE_STRUCT_t            C1p12;
extern S_LG_D4_INTERFACE_STRUCT_t            C2p01;
extern S_LG_DA3_INTERFACE_STRUCT_t           C1p05;
extern S_LG_DAR2_INTERFACE_STRUCT_t          C2p07;
extern S_LG_DAR2_INTERFACE_STRUCT_t          C2p08;
extern S_LG_DAF1_INTERFACE_STRUCT_t          C2p02;
extern S_LG_DAF1_INTERFACE_STRUCT_t          C2p03;
extern S_LG_DAF1_INTERFACE_STRUCT_t          C2p04;
extern S_LG_DAF1_INTERFACE_STRUCT_t          C2p05;
extern S_LG_DAF1_INTERFACE_STRUCT_t          C2p06;
extern S_LG_PWM2_INTERFACE_STRUCT_t          C2p09;
extern S_LG_PWM2_INTERFACE_STRUCT_t          C2p10;
extern S_LG_PWM2_INTERFACE_STRUCT_t          C2p11;
extern S_LG_PWM2_INTERFACE_STRUCT_t          C2p12;
extern S_LG_PWM2_GROUPS_INTERFACE_STRUCT_t   C2p09_C2p10;
extern S_LG_PWM2_GROUPS_INTERFACE_STRUCT_t   C2p11_C2p12;
extern S_CAN_INTERFACE_STRUCT_t              CAN[1];
extern S_LG_VLDP_INTERFACE_STRUCT_t          C1p02;
extern S_LG_5V_SENSOR_PWR_STRUCT_t           C1p08;
extern S_LED1_INTERFACE_STRUCT_t             Led;

/*** Externals section END. ***/


#endif /* ifndef _INTERFACE_H */
#ifndef NUMBER_D4_CHANNEL_CONFIG
 #define NUMBER_D4_CHANNEL_CONFIG   6
#endif
extern S_LG_D4_INTERFACE_STRUCT_t *const   g_KpSA_D_MC_InPtr[NUMBER_D4_CHANNEL_CONFIG];
#ifndef NUMBER_DA3_CHANNEL_CONFIG
 #define NUMBER_DA3_CHANNEL_CONFIG   1
#endif
extern S_LG_DA3_INTERFACE_STRUCT_t *const   g_KpSA_DAIN_MC_Ptr[NUMBER_DA3_CHANNEL_CONFIG];
#ifndef NUMBER_DAR2_CHANNEL_CONFIG
 #define NUMBER_DAR2_CHANNEL_CONFIG   2
#endif
extern S_LG_DAR2_INTERFACE_STRUCT_t *const   g_KpSA_DAINTR_MC_Ptr[NUMBER_DAR2_CHANNEL_CONFIG];
#ifndef NUMBER_DAF1_CHANNEL_CONFIG
 #define NUMBER_DAF1_CHANNEL_CONFIG   5
#endif
extern S_LG_DAF1_INTERFACE_STRUCT_t *const   g_KpSA_MFIN_DAF_MC_Ptr[NUMBER_DAF1_CHANNEL_CONFIG];
#ifndef NUMBER_PWM2_CHANNEL_CONFIG
 #define NUMBER_PWM2_CHANNEL_CONFIG   4
#endif
extern S_LG_PWM2_INTERFACE_STRUCT_t *const   g_KpSA_MFOUT_MC_Ptr[NUMBER_PWM2_CHANNEL_CONFIG];
#ifndef NUMBER_LG_PWM2_MASTER_CONFIG
 #define NUMBER_LG_PWM2_MASTER_CONFIG   2
#endif
extern S_LG_PWM2_INTERFACE_STRUCT_t *const   g_KpSA_MC_MASTERPtr[NUMBER_LG_PWM2_MASTER_CONFIG];
extern S_LG_PWM2_INTERFACE_STRUCT_t *const   g_KpSA_MC_SLAVEPtr[NUMBER_LG_PWM2_MASTER_CONFIG];
#ifndef NUMBER_LG_PWM2_GROUP_CONFIG
 #define NUMBER_LG_PWM2_GROUP_CONFIG   2
#endif
extern S_LG_PWM2_GROUPS_INTERFACE_STRUCT_t *const   g_KpSA_MC_GroupPtr[NUMBER_LG_PWM2_GROUP_CONFIG];
#ifndef NUMBER_D_A_R_C_CHANNEL_CONFIG
 #define NUMBER_D_A_R_C_CHANNEL_CONFIG   0U
#endif
#ifndef NUMBER_D_A_R_CHANNEL_CONFIG
 #define NUMBER_D_A_R_CHANNEL_CONFIG   0U
#endif
#ifndef NUMBER_VLDP_CHANNEL_CONFIG
 #define NUMBER_VLDP_CHANNEL_CONFIG   1
#endif
extern S_LG_VLDP_INTERFACE_STRUCT_t *const   g_KpSA_VldpAdInMCPtr[NUMBER_VLDP_CHANNEL_CONFIG];
#ifndef NUMBER_5V_SNSR_PWR_CHANNEL_CONFIG
 #define NUMBER_5V_SNSR_PWR_CHANNEL_CONFIG   1
#endif
extern S_LG_5V_SENSOR_PWR_STRUCT_t *const   g_KpSA_5VSensorPwrPtr[NUMBER_5V_SNSR_PWR_CHANNEL_CONFIG];
#ifndef NUMBER_LED1_CHANNEL_CONFIG
 #define NUMBER_LED1_CHANNEL_CONFIG   1
#endif
extern S_LED1_INTERFACE_STRUCT_t *const   g_KpSA_LedPtr[NUMBER_LED1_CHANNEL_CONFIG];
#ifndef NUMBER_SPI_CHIPSELECTS_CHANNEL_CONFIG
 #define NUMBER_SPI_CHIPSELECTS_CHANNEL_CONFIG   1
#endif
#ifndef NUMBER_SERIAL_IO_CHANNEL_CONFIG
 #define NUMBER_SERIAL_IO_CHANNEL_CONFIG   1
#endif
#ifndef NUMBER_ANMUXSELECT_CHANNEL_CONFIG
 #define NUMBER_ANMUXSELECT_CHANNEL_CONFIG   1
#endif
#ifndef NUMBER_SPI1_CHANNEL_CONFIG
 #define NUMBER_SPI1_CHANNEL_CONFIG   1
#endif

